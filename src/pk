#!/bin/sh

http_get() {
    [ -z "$default_headers" ] && curl -# $@ || curl -H "$default_headers" -# $@
}

http_get_download() {
    http_get -L $@
}

gh_api_url() {
    echo "https://api.github.com/repos/$1/releases"
}

json_raw() {
    jq -rcM $@
}

json_print() {
    printf "%s" $1
}

temp_file() {
    mktemp /tmp/XXXXXX-pk.$1
}

extract() {
    # ref https://github.com/kisslinux/kiss/blob/master/kiss
    case $1 in
        *.tbz|*.bz2) bzip2 -d ;;
        *.lzma)      lzma -dc ;;
        *.lz)        lzip -dc ;;
        *.tar)       cat      ;;
        *.tgz|*.gz)  gzip -d  ;;
        *.xz|*.txz)  xz -dc   ;;
        *.zst)       zstd -dc ;;
    esac < "$1"
}

gh_api_key="$GH_API_KEY"
[ -n "$gh_api_key" ] && default_headers="Authorization: token $GH_API_KEY"
gh_filter_downloads='.assets[].browser_download_url'
# dest="$HOME/bin"
: ${pkgdest:="/tmp"}
: ${pkgpath:="./pkgs/"}

print_env() {
    echo "destination: $dest"
    echo "package sources:"
    (
        IFS=":"
        for path in $pkgpath
        do
            echo " - $path"
        done
    )
    echo "tag: $tag"
}

add_to_pkgpath() {
    [ -n "$1" ] && pkgpath="${pkgpath}:$1"
}

list_length() (
    length=0
    for item in "$@"
    do
        length=$((length + 1))
    done
    echo $length
)

get_sources() (
    pkgname=$1
    IFS=":"
    sources=""
    for path in $pkgpath
    do
        file="${path}/${pkgname}.sh"
        [ -f "$file" ] && sources="$sources $file"
    done
    echo $sources
)

pk_add() {
    pkgname=$1

    [ -z "$pkgname" ] && {
        echo "usage: add <pkgname>"
        exit 1
    }

    sources=$(
        IFS=":"
        sources=""
        for path in $pkgpath
        do
            file="${path}/${pkgname}.sh"
            [ -f "$file" ] && sources="$sources $file"
        done
        echo $sources
    )
    # . ./pkgs/$pkgname.sh
    number_of_sources=`list_length $sources`
    [ "$number_of_sources" = "0" ] && {
        echo "no sources found for package $pkgname"
        exit 1
    }

    [ "$number_of_sources" = "1" ] && {
        for src in "$sources"
        do
            . $src
            installer `fetch`
        done
        :
    } || { # more than 1 source
        echo "failed: there are multiple sources: "
        for path in $sources
        do
            echo " - $path"
        done
        echo
        echo "* try specifying one path for pkgpath"
        echo "i.e. \`pk pkgpath <./preferred_source> add <pkgname>\`"
    }
}

pk_show() {
    pkgname=$1
    sources=`get_sources $pkgname`
    number_of_sources=`list_length $sources`
    [ "$number_of_sources" = "0" ] && {
        echo "no sources found for package $pkgname"
        exit 1
    }

    [ "$number_of_sources" = "1" ] && {
        for src in "$sources"
        do
            . $src
            show_releases
            echo "default: $default_uri"
        done
        :
    } || { # more than 1 source
        echo "failed: there are multiple sources: "
        for path in $sources
        do
            echo " - $path"
        done
        echo
        echo "* try specifying one path for pkgpath"
        echo "i.e. \`pk pkgpath <./preferred_source> add <pkgname>\`"
    }
}

[ -z "$1" ] && echo "usage: pk <command> [args] <command> [args] ..." && exit 1
echo
while [ -n "$1" ]
do
    case "$1" in
        dest) shift 1; pkgdest="$1"; shift 1 ;;
        pkgpath) shift 1; pkgpath="$1"; shift 1 ;;
        tag) shift 1; tag="tags/$1"; shift 1 ;;
        show) shift 1; pk_show $1; shift 1 ;;
        uri) shift 1; uri=$1; shift 1 ;;
        add) {
            shift 1
            pk_add $1
            shift 1
        } ;;
        help) {
            echo "usage: pk <command> [args] <command> [args] ..."
            echo "commands:"
            echo " - dest <install directory>: where to install packages"
            echo " - pkgpath <source directories>: like \$PATH environment"
            echo "   variable directories separated like so"
            echo "   \"dir1:dir2: ... :dirN\""
            echo "   * specifies where package scripts are to be looked for"
            echo " - tag <tag name>: specifies github release tag"
            echo "   e.g. nightly"
            echo " - show <package name>: list download links (uri) of package"
            echo " - uri <file name>: specifies what file to install"
            echo " - add <package name>: specifies package name to add"
            echo
            echo "** note that commands are executed as they are read, this"
            echo "   means that you should for the most part specify add"
            echo "   command last"
            exit 1
        } ;;
        *) shift 1 ;;
    esac
done
# print_env

# for pkg in `find ./pkgs -type f -name *.sh`
# do
#     echo "fetching: $pkg"
#     . $pkg # source pkg
#     show_releases
#     installer `fetch`
# done
